//========== Copyright © Valve Corporation, All rights reserved. ========
#include "vjobutils.h"

#ifdef VJOBS_ON_SPURS

const char * HumanReadableCellResult( int nCellResult )
{
	switch ( nCellResult )
	{
	case CELL_SPURS_CORE_ERROR_AGAIN:
		return "CELL_SPURS_CORE_ERROR_AGAIN";
	case CELL_SPURS_CORE_ERROR_INVAL:
		return "CELL_SPURS_CORE_ERROR_INVAL";
	case CELL_SPURS_CORE_ERROR_NOSYS:
		return "CELL_SPURS_CORE_ERROR_NOSYS";
	case CELL_SPURS_CORE_ERROR_NOMEM:
		return "CELL_SPURS_CORE_ERROR_NOMEM";
	case CELL_SPURS_CORE_ERROR_SRCH:
		return "CELL_SPURS_CORE_ERROR_SRCH";
	case CELL_SPURS_CORE_ERROR_NOENT:
		return "CELL_SPURS_CORE_ERROR_NOENT";
	case CELL_SPURS_CORE_ERROR_NOEXEC:
		return "CELL_SPURS_CORE_ERROR_NOEXEC";
	case CELL_SPURS_CORE_ERROR_DEADLK:
		return "CELL_SPURS_CORE_ERROR_DEADLK";
	case CELL_SPURS_CORE_ERROR_PERM:
		return "CELL_SPURS_CORE_ERROR_PERM";
	case CELL_SPURS_CORE_ERROR_BUSY:
		return "CELL_SPURS_CORE_ERROR_BUSY";
	case CELL_SPURS_CORE_ERROR_ABORT:
		return "CELL_SPURS_CORE_ERROR_ABORT";
	case CELL_SPURS_CORE_ERROR_FAULT:
		return "CELL_SPURS_CORE_ERROR_FAULT";
	case CELL_SPURS_CORE_ERROR_CHILD:
		return "CELL_SPURS_CORE_ERROR_CHILD";
	case CELL_SPURS_CORE_ERROR_STAT:
		return "CELL_SPURS_CORE_ERROR_STAT";
	case CELL_SPURS_CORE_ERROR_ALIGN:
		return "CELL_SPURS_CORE_ERROR_ALIGN";
	case CELL_SPURS_CORE_ERROR_NULL_POINTER:
		return "CELL_SPURS_CORE_ERROR_NULL_POINTER";


	case CELL_SPURS_POLICY_MODULE_ERROR_AGAIN:
		return "CELL_SPURS_POLICY_MODULE_ERROR_AGAIN";
	case CELL_SPURS_POLICY_MODULE_ERROR_INVAL:
		return "CELL_SPURS_POLICY_MODULE_ERROR_INVAL";
	case CELL_SPURS_POLICY_MODULE_ERROR_NOSYS:
		return "CELL_SPURS_POLICY_MODULE_ERROR_NOSYS";
	case CELL_SPURS_POLICY_MODULE_ERROR_NOMEM:
		return "CELL_SPURS_POLICY_MODULE_ERROR_NOMEM";
	case CELL_SPURS_POLICY_MODULE_ERROR_SRCH:
		return "CELL_SPURS_POLICY_MODULE_ERROR_SRCH";
	case CELL_SPURS_POLICY_MODULE_ERROR_NOENT:
		return "CELL_SPURS_POLICY_MODULE_ERROR_NOENT";
	case CELL_SPURS_POLICY_MODULE_ERROR_NOEXEC:
		return "CELL_SPURS_POLICY_MODULE_ERROR_NOEXEC";
	case CELL_SPURS_POLICY_MODULE_ERROR_DEADLK:
		return "CELL_SPURS_POLICY_MODULE_ERROR_DEADLK";
	case CELL_SPURS_POLICY_MODULE_ERROR_PERM:
		return "CELL_SPURS_POLICY_MODULE_ERROR_PERM";
	case CELL_SPURS_POLICY_MODULE_ERROR_BUSY:
		return "CELL_SPURS_POLICY_MODULE_ERROR_BUSY";
	case CELL_SPURS_POLICY_MODULE_ERROR_ABORT:
		return "CELL_SPURS_POLICY_MODULE_ERROR_ABORT";
	case CELL_SPURS_POLICY_MODULE_ERROR_FAULT:
		return "CELL_SPURS_POLICY_MODULE_ERROR_FAULT";
	case CELL_SPURS_POLICY_MODULE_ERROR_CHILD:
		return "CELL_SPURS_POLICY_MODULE_ERROR_CHILD";
	case CELL_SPURS_POLICY_MODULE_ERROR_STAT:
		return "CELL_SPURS_POLICY_MODULE_ERROR_STAT";
	case CELL_SPURS_POLICY_MODULE_ERROR_ALIGN:
		return "CELL_SPURS_POLICY_MODULE_ERROR_ALIGN";
	case CELL_SPURS_POLICY_MODULE_ERROR_NULL_POINTER:
		return "CELL_SPURS_POLICY_MODULE_ERROR_NULL_POINTER";


	case CELL_SPURS_TASK_ERROR_AGAIN:
		return "CELL_SPURS_TASK_ERROR_AGAIN";
	case CELL_SPURS_TASK_ERROR_INVAL:
		return "CELL_SPURS_TASK_ERROR_INVAL";
	case CELL_SPURS_TASK_ERROR_NOSYS:
		return "CELL_SPURS_TASK_ERROR_NOSYS";
	case CELL_SPURS_TASK_ERROR_NOMEM:
		return "CELL_SPURS_TASK_ERROR_NOMEM";
	case CELL_SPURS_TASK_ERROR_SRCH:
		return "CELL_SPURS_TASK_ERROR_SRCH";
	case CELL_SPURS_TASK_ERROR_NOENT:
		return "CELL_SPURS_TASK_ERROR_NOENT";
	case CELL_SPURS_TASK_ERROR_NOEXEC:
		return "CELL_SPURS_TASK_ERROR_NOEXEC";
	case CELL_SPURS_TASK_ERROR_DEADLK:
		return "CELL_SPURS_TASK_ERROR_DEADLK";
	case CELL_SPURS_TASK_ERROR_PERM:
		return "CELL_SPURS_TASK_ERROR_PERM";
	case CELL_SPURS_TASK_ERROR_BUSY:
		return "CELL_SPURS_TASK_ERROR_BUSY";
	case CELL_SPURS_TASK_ERROR_ABORT:
		return "CELL_SPURS_TASK_ERROR_ABORT";
	case CELL_SPURS_TASK_ERROR_FAULT:
		return "CELL_SPURS_TASK_ERROR_FAULT";
	case CELL_SPURS_TASK_ERROR_CHILD:
		return "CELL_SPURS_TASK_ERROR_CHILD";
	case CELL_SPURS_TASK_ERROR_STAT:
		return "CELL_SPURS_TASK_ERROR_STAT";
	case CELL_SPURS_TASK_ERROR_ALIGN:
		return "CELL_SPURS_TASK_ERROR_ALIGN";
	case CELL_SPURS_TASK_ERROR_NULL_POINTER:
		return "CELL_SPURS_TASK_ERROR_NULL_POINTER";
	case CELL_SPURS_TASK_ERROR_FATAL:
		return "CELL_SPURS_TASK_ERROR_FATAL";

	case CELL_SPURS_TASK_ERROR_SHUTDOWN:
		return "CELL_SPURS_TASK_ERROR_SHUTDOWN";

	case CELL_SPURS_JOB_ERROR_AGAIN:
		return "CELL_SPURS_JOB_ERROR_AGAIN";
	case CELL_SPURS_JOB_ERROR_INVAL:
		return "CELL_SPURS_JOB_ERROR_INVAL";
	case CELL_SPURS_JOB_ERROR_NOSYS:
		return "CELL_SPURS_JOB_ERROR_NOSYS";
	case CELL_SPURS_JOB_ERROR_NOMEM:
		return "CELL_SPURS_JOB_ERROR_NOMEM";
	case CELL_SPURS_JOB_ERROR_SRCH:
		return "CELL_SPURS_JOB_ERROR_SRCH";
	case CELL_SPURS_JOB_ERROR_NOENT:
		return "CELL_SPURS_JOB_ERROR_NOENT";
	case CELL_SPURS_JOB_ERROR_NOEXEC:
		return "CELL_SPURS_JOB_ERROR_NOEXEC";
	case CELL_SPURS_JOB_ERROR_DEADLK:
		return "CELL_SPURS_JOB_ERROR_DEADLK";
	case CELL_SPURS_JOB_ERROR_PERM:
		return "CELL_SPURS_JOB_ERROR_PERM";
	case CELL_SPURS_JOB_ERROR_BUSY:
		return "CELL_SPURS_JOB_ERROR_BUSY";
	case CELL_SPURS_JOB_ERROR_JOB_DESCRIPTOR:
		return "CELL_SPURS_JOB_ERROR_JOB_DESCRIPTOR";
	case CELL_SPURS_JOB_ERROR_JOB_DESCRIPTOR_SIZE:
		return "CELL_SPURS_JOB_ERROR_JOB_DESCRIPTOR_SIZE";
	case CELL_SPURS_JOB_ERROR_FAULT:
		return "CELL_SPURS_JOB_ERROR_FAULT";
	case CELL_SPURS_JOB_ERROR_CHILD:
		return "CELL_SPURS_JOB_ERROR_CHILD";
	case CELL_SPURS_JOB_ERROR_STAT:
		return "CELL_SPURS_JOB_ERROR_STAT";
	case CELL_SPURS_JOB_ERROR_ALIGN:
		return "CELL_SPURS_JOB_ERROR_ALIGN";
	case CELL_SPURS_JOB_ERROR_NULL_POINTER:
		return "CELL_SPURS_JOB_ERROR_NULL_POINTER";

	case CELL_SPURS_JOB_ERROR_MEMORY_SIZE:
		return "CELL_SPURS_JOB_ERROR_MEMORY_SIZE";
	case CELL_SPURS_JOB_ERROR_UNKNOWN_COMMAND:
		return "CELL_SPURS_JOB_ERROR_UNKNOWN_COMMAND";
	case CELL_SPURS_JOB_ERROR_JOBLIST_ALIGNMENT:
		return "CELL_SPURS_JOB_ERROR_JOBLIST_ALIGNMENT";
	case CELL_SPURS_JOB_ERROR_JOB_ALIGNMENT:
		return "CELL_SPURS_JOB_ERROR_JOB_ALIGNMENT";
	case CELL_SPURS_JOB_ERROR_CALL_OVERFLOW:
		return "CELL_SPURS_JOB_ERROR_CALL_OVERFLOW";
	case CELL_SPURS_JOB_ERROR_ABORT:
		return "CELL_SPURS_JOB_ERROR_ABORT";
	case CELL_SPURS_JOB_ERROR_DMALIST_ELEMENT:
		return "CELL_SPURS_JOB_ERROR_DMALIST_ELEMENT";
	case CELL_SPURS_JOB_ERROR_NUM_CACHE:
		return "CELL_SPURS_JOB_ERROR_NUM_CACHE";
	case CELL_SPURS_JOB_ERROR_INVALID_BINARY:
		return "CELL_SPURS_JOB_ERROR_INVALID_BINARY";

	default:
		return "<unknown>";
	}
}

#endif
